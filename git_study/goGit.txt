참고 : 유트부 - 동빈나 Git 동영상

1. github  가입
2. repository 만들기
	- 주소 확인
3. git-scm.com 에서 git download and setup

4. 환경 설정
- 이름등록 :  git config --global user.name sizepark
- 이메일등록 :  git config --global user.email sizepark@hotmail.com

5. local repository(내컴퓨터) <-> remote repository(github) 연동
- git clone (git repository address)

6.  github 에 파일 올리기
- git add startGit.txt

7. commit
- 파일이 올라간 시점을 스냅샷을 찍듯이 기록하는 행위
- git commit -m "Add Text File [startGit.txt]"
- 여기까지는 로컬 기준

8. push
- 원격 저장소(github)에 실지로 올리기

----------------------------------------------------------------------------
Git 동작원리
- working directory
	git add
- staging area
	git commiy
- local repository
	git push
- remote repository
	git fetch -> git merge = git pull 
----------------------------------------------------------------------------------

1. 해당 프로젝트에 소속된 사람이 아닌 경우
- Pull Request 를 작성하여 오픈소스에 기여

2. 해당 프로젝트에 소속된 사람인 경우
- commit -> push 사용

$ git status
- 폴더에 새로운 파일이 생기면 상태 알림

$ git add <filename>
- 파일을 staging area 에 올림

$ git reset <filename>
- 파일을 staging area 에서 내림

$ git add .
- 수정된 파일을 staging area 올려줌

$ git commit -m "~~~"
- 파일을 commit 해서 local repository에 올림
- [-m] : 파일 메시지 첨부

$ git push
- remote repository에 파일 업로드

$ git restore <filename>
- git status 를 사용해서 현재 상태 확인
- 수정한 파일을 전 상태로 돌리고 싶을때 사용

$ git commit --amend
- commit 설정을 변경하고 싶을때 사용

-----------------------------------------

# github에서 commit 내역 수정하기 #

$ git reset --hard <hash>
- 특정 커밋 해쉬값을 사용해서 이전으로 되돌림
- [--hard] : 되돌리고 이후 커밋내용을 지움


$ git push -f
- local repo와 remote repo의 commit 내용이 같지 않을때 사용
- remote repo에 강제로 commit 동기화


$ git commit --amend 
- commit 설정 변경 가능
- 설정 저장후 /git push -f/ 사용해서 remote repo 변경 필요\

----------------------------------------------------------------------
# 브랜치(Branch) 사용 
	: 서비스 향상, 버전 업등이 필요할때 현재 배포중인 상태에서 가지를 쳐서 작업할 수 있능 상태를 만든다?

- Master Branch(통합 브랜치)
	: 안정화된 언제든지 배포가능한 상태

- Develop Branch(topic branch)
	: 추가 개발이 필요할떄 사용하고, 추후 Master Branch에 합류(merge)

- Bug Fix Branch(topic branch)
	: 오류 확인 수정 후, Master Branch에 합류(merge)

# 만들어 보기
$ git branch
- 현재 branch 상태 확인

$ git branch develop
- develop 브랜치 생성

$ git checkout develop
- develop 브랜치 사용

$ git merge develop
- main과 develop 브랜치를 합침
- git log로 확인 가능

$ git branch -d develop
- 사용 완료한 브랜치 지우기

--------------------------------------------------------------------------------
# 서로 다른 내용을 가지고 있는(branch 충돌시)  Branch 병합하는 방법

[상황]
- develop branch 생성
- div 함수 추가
- main branch로 checkout 해서 주석 추가
[해결]
- main branch 로 checkout 
- $ git merge develop 
	: 코드가 서로 달라서 자동 병합 실패
	Auto-merging my_module.py
	CONFLICT (content): Merge conflict in my_module.py
	Automatic merge failed; fix conflicts and then commit the result.

- 해당파일(my_module.py)을 확인
	: 서로 다른 코드가 표시 됨
	: 둘 중 하나를 선택하면 나머지를 지우고 저장
	
- $ git add .
	: 파일 staging area에 올리기

- $ git commit -m "Add my_module [Div]&comment"
	: 파일 local repo에 등록

- $ git merge develop
	: branch 병합

- $ git branch -d develop
	: 사용완료 branch 제거

- $ git push
	: 변경된 내용 remote repo 변경

--------------------------------------
# remote repo 관리 방법

$ git remote
- 현재 원격저장소로 등록된것 확인 

$ git remote show origin
- 원격 저장소 환경 확인

$ git remote add <저장소 이름> <해당 remote repo 주소>
- 설정한 이름으로 해당 remote repo 주소를 설정한다

$ git remote -v
- 전체 목록 확인

$ git remote rename <기존 이름> <변경할 이름>
- 원격 저장소 이름 바꾸기

$ git log(merge) <해당 저장소 이름>
- 해당 저장소별로 기록 확인 및 병합 등등 가능

$ git remote rm <해당 저장소 이름>
- 원격 저장소 지우기

----------------------------------------------------------------
# Log 관리

$ git log
- log 기록 확인 -> [q] 눌러서 나오기

$ git log --stat
- log 별 통계기록 : 변경량 등

$ git log -p -3
- commit에 적용된 구체적인 사항 확인 가능, 위에서 3번째 까지  

$ git log --pretty=oneline
- 각각의 commit 내용이 한줄로 표현

$ git log --pretty=format:"%h -> %an, %ar : %s" --graph
- 각 format에 해당하는 내용을 출력
- 과거부터 현재까지 파일 작성 및 브랜치 생성, 병합등의 내용 확인 가능
- "%h(해쉬값) -> %an(작성자), %ar(시간) : %s(작성한 내용)" --graph(그래프로 출력)

----------------------------------------------------------------------
# 프로젝트 소개글 작성
- readme.index 파일

- github에서 작성 가능

- mark down 형식으로 작성

[ 코드 블록 넣기]
```<해당언어>
<코드 블럭>
```
[코드 블럭 예시]
```c
# include <stdio.h>
int main(void){
  print("hello world!")
  return 0;
}
```


